// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model users {
  id             String         @id @default(uuid())
  name           String
  email          String         @unique
  password       String?
  status         String
  image          String?
  teams          teams[]
  team_members   team_members[]
  projects       projects[]
  boardsReporter boards[]       @relation("reporter")
  boardsAssignee boards[]       @relation("assignee")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model teams {
  id          String         @id @default(uuid())
  name        String
  description String?
  owner_id    users          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String
  members     team_members[]
  projects    projects[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model team_members {
  id        String   @id @default(uuid())
  user      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  team      teams    @relation(fields: [team_id], references: [id], onDelete: Cascade)
  team_id   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model projects {
  id        String   @id @default(uuid())
  name      String
  url       String
  owner_name String
  owner_id  users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String
  team      teams    @relation(fields: [team_id], references: [id], onDelete: Cascade)
  team_id   String
  boards    boards[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model boards {
  id          String   @id @default(uuid())
  title       String
  description String?
  reporter_info    users    @relation("reporter", fields: [reporter], references: [id], onDelete: Cascade)
  reporter    String
  assignee_info          users    @relation("assignee", fields: [assignee], references: [id], onDelete: Cascade)
  assignee    String
  status      String   @default("TODO")
  priority    Int      @default(0)
  // status      BoardStatus   @default(TODO) --- When change for postgreSQL change to ENUM
  points      Int?
  label       String?
  issue_id    String?
  issue_url   String?
  issue_number String?
  project     projects @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// enum BoardStatus {
//   BLOCKED
//   TODO
//   INPROGRESS
//   CODE
//   READY
//   DONE
// }
